<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.7">Jekyll</generator><link href="http://localhost:4000/atom.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-07-14T10:02:25+08:00</updated><id>http://localhost:4000/atom.xml</id><title type="html">Wonderland</title><subtitle>Austin's adventures in wonderland</subtitle><author><name>Austin</name></author><entry><title type="html">反对本本主义</title><link href="http://localhost:4000/philosophy/2020/07/12/%E5%8F%8D%E5%AF%B9%E6%9C%AC%E6%9C%AC%E4%B8%BB%E4%B9%89/" rel="alternate" type="text/html" title="反对本本主义" /><published>2020-07-12T00:00:00+08:00</published><updated>2020-07-12T00:00:00+08:00</updated><id>http://localhost:4000/philosophy/2020/07/12/%E5%8F%8D%E5%AF%B9%E6%9C%AC%E6%9C%AC%E4%B8%BB%E4%B9%89</id><content type="html" xml:base="http://localhost:4000/philosophy/2020/07/12/%E5%8F%8D%E5%AF%B9%E6%9C%AC%E6%9C%AC%E4%B8%BB%E4%B9%89/">&lt;p&gt;&lt;strong&gt;毛泽东&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;1930 年 5 月&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;一-没有调查没有发言权&quot;&gt;一 没有调查，没有发言权&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/h2&gt;

&lt;p&gt;　　你对于某个问题没有调查，就停止你对于某个问题的发言权。这不太野蛮了吗？一点也不野蛮，你对那个问题的现实情况和历史情况既然没有调查，不知底里，对于那个问题的发言便一定是瞎说一顿。瞎说一顿之不能解决问题是大家明了的，那末，停止你的发言权有什么不公道呢？许多的同志都成天地闭着眼睛在那里瞎说，这是共产党员的耻辱，岂有共产党员而可以闭着眼睛瞎说一顿的吗？&lt;/p&gt;

&lt;p&gt;　　要不得！&lt;/p&gt;

&lt;p&gt;　　要不得！&lt;/p&gt;

&lt;p&gt;　　注重调查！&lt;/p&gt;

&lt;p&gt;　　反对瞎说！&lt;/p&gt;

&lt;h2 id=&quot;二-调查就是解决问题&quot;&gt;二 调查就是解决问题&lt;/h2&gt;

&lt;p&gt;　　你对于那个问题不能解决吗？那末，你就去调查那个问题的现状和它的历史吧！你完完全全调查明白了，你对那个问题就有解决的办法了。一切结论产生于调查情况的末尾，而不是在它的先头。只有蠢人，才是他一个人，或者邀集一堆人，不作调查，而只是冥思苦索地「想办法」，「打主意」。须知这是一定不能想出什么好办法，打出什么好主意的。换一句话说，他一定要产生错办法和错主意。&lt;/p&gt;

&lt;p&gt;　　许多巡视员，许多游击队的领导者，许多新接任的工作干部，喜欢一到就宣布政见，看到一点表面，一个枝节，就指手画脚地说这也不对，那也错误。这种纯主观地「瞎说一顿」，实在是最可恶没有的。他一定要弄坏事情，一定要失掉群众，一定不能解决问题。&lt;/p&gt;

&lt;p&gt;　　许多做领导工作的人，遇到困难问题，只是叹气，不能解决。他恼火，请求调动工作，理由是「才力小，干不下」。这是懦夫讲的话。迈开你的两脚，到你的工作范围的各部分各地方去走走。学个孔夫子的「每事问&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;，任凭什么才力小也能解决问题，因为你未出门时脑子是空的，归来时脑子已经不是空的了，已经载来了解决问题的各种必要材料，问题就是这样子解决了。一定要出门吗?也不一定，可以召集那些明了情况的人来开个调查会，把你所谓困难问题的「来源」找到手，「现状」弄明白，你的这个困难问题也就容易解决了。&lt;/p&gt;

&lt;p&gt;　　调查就像「十月怀胎」，解决问题就像「一朝分娩」。调查就是解决问题。&lt;/p&gt;

&lt;h2 id=&quot;三-反对本本主义&quot;&gt;三 反对本本主义&lt;/h2&gt;

&lt;p&gt;　　以为上了书的就是对的，文化落后的中国农民至今还存着这种心理。不谓共产党内讨论问题，也还有人开口闭口「拿本本来」。我们说上级领导机关的指示是正确的，决不单是因为它出于「上级领导机关」，而是因为它的内容是适合于斗争中客观和主观情势的，是斗争所需要的。不根据实际情况进行讨论和审察，一味盲目执行，这种单纯建立在「上级」观念上的形式主义的态度是很不对的。为什么党的策略路线总是不能深入群众，就是这种形式主义在那里作怪。盲目地表面上完全无异议地执行上级的指示，这不是真正在执行上级的指示，这是反对上级指示或者对上级指示怠工的最妙方法。&lt;/p&gt;

&lt;p&gt;　　本本主义的社会科学研究法也同样是最危险的，甚至可能走上反革命的道路，中国有许多专门从书本上讨生活的从事社会科学研究的共产党员，不是一批一批地成了反革命吗？就是明显的证据。我们说马克思主义是对的，决不是因为马克思这个人是什么「先哲」，而是因为他的理论，在我们的实践中，在我们的斗争中，证明了是对的。我们的斗争需要马克思主义。我们欢迎这个理论，丝毫不存什么「先哲」一类的形式的甚至神秘的念头在里面。读过马克思主义「本本」的许多人，成了革命叛徒，那些不识字的工人常常能够很好地掌握马克思主义，马克思主义的「本本」是要学习的，但是必须同我国的实际情况相结合。我们需要「本本」，但是一定要纠正脱离实际情况的本本主义。&lt;/p&gt;

&lt;p&gt;　　怎样纠正这种本本主义？只有向实际情况作调查。&lt;/p&gt;

&lt;h2 id=&quot;四-离开实际调查就要产生唯心的阶级估量和唯心的工作指导那末它的结果不是机会主义便是盲动主义&quot;&gt;四 离开实际调查就要产生唯心的阶级估量和唯心的工作指导，那末，它的结果，不是机会主义，便是盲动主义&lt;/h2&gt;

&lt;p&gt;　　你不相信这个结论吗？事实要强迫你信。你试试离开实际调查去估量政治形势，去指导斗争工作，是不是空洞的唯心的呢？这种空洞的唯心的政治估量和工作指导，是不是要产生机会主义错误，或者盲动主义错误呢？一定要弄出错误。这并不是他在行动之前不留心计划，而是他于计划之前不留心了解社会实际情况，这是红军游击队里时常遇见的。那些李逵&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; 式的官长，看见弟兄们犯事，就懵懵懂懂地乱处置一顿。结果，犯事人不服，闹出许多纠纷，领导者的威信也丧失干净，这不是红军里常见的吗？&lt;/p&gt;

&lt;p&gt;　　必须洗刷唯心精神，防止一切机会主义盲动主义错误出现，才能完成争取群众战胜敌人的任务，必须努力作实际调查，才能洗刷唯心精神。&lt;/p&gt;

&lt;h2 id=&quot;五-社会经济调查是为了得到正确的阶级估量接着定出正确的斗争策略&quot;&gt;五 社会经济调查，是为了得到正确的阶级估量，接着定出正确的斗争策略&lt;/h2&gt;

&lt;p&gt;　　为什么要作社会经济调查？我们就是这样回答。因此，作为我们社会经济调查的对象的是社会的各阶级，而不是各种片断的社会现象。近来红军第四军的同志们一般的都注意调查工作了&lt;sup id=&quot;fnref:4&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;，但是很多人的调查方法是错误的。调查的结果就像挂了一篇狗肉账，像乡下人上街听了许多新奇故事，又像站在高山顶上观察人民城郭。这种调查用处不大，不能达到我们的主要目的。我们的主要目的，是要明了社会各阶级的政治经济情况。我们调查所要得到的结论，是各阶级现在的以及历史的盛衰荣辱的情况。举例来说，我们调查农民成分时；不但要知道自耕农&lt;sup id=&quot;fnref:5&quot;&gt;&lt;a href=&quot;#fn:5&quot; class=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;，半自耕农&lt;sup id=&quot;fnref:6&quot;&gt;&lt;a href=&quot;#fn:6&quot; class=&quot;footnote&quot;&gt;6&lt;/a&gt;&lt;/sup&gt;，佃农，这些以租佃关系区别的各种农民的数目有多少，我们尤其要知道富农，中农，贫农，这些以阶级区别阶层区别的各种农民的数目有多少。我们调查商人成分，不但要知道粮食业、衣服业、药材业等行业的人数各有多少，尤其要调查小商人、中等商人、大商人各有多少。我们不仅要调查各业的情况，尤其要调查各业内部的阶级情况。我们不仅要调查各业之间的相互关系，尤其要调查各阶级之间的相互关系。我们调查工作的主要方法是解剖各种社会阶级，我们的终极目的是要明了各种阶级的相互关系，得到正确的阶级估量，然后定出我们正确的斗争策略，确定哪些阶级是革命斗争的主力，哪些阶级是我们应当争取的同盟者，哪些阶级是要打倒的。我们的目的完全在这里。&lt;/p&gt;

&lt;p&gt;　　什么是调查时要注意的社会阶级？下面那些就是：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;工业无产阶级&lt;/li&gt;
  &lt;li&gt;手工业工人&lt;/li&gt;
  &lt;li&gt;雇农&lt;/li&gt;
  &lt;li&gt;贫农&lt;/li&gt;
  &lt;li&gt;城市贫民&lt;/li&gt;
  &lt;li&gt;游民&lt;/li&gt;
  &lt;li&gt;手工业者&lt;/li&gt;
  &lt;li&gt;小商人&lt;/li&gt;
  &lt;li&gt;中农&lt;/li&gt;
  &lt;li&gt;富农&lt;/li&gt;
  &lt;li&gt;地主阶级&lt;/li&gt;
  &lt;li&gt;商业资产阶级&lt;/li&gt;
  &lt;li&gt;工业资产阶级&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;　　这些阶级（有的是阶层）的状况，都是我们调查时要注意的。在我们暂时的工作区域中所没有的，只是工业无产阶级和工业资产阶级，其余都是经常碰见的。我们的斗争策略就是对这许多阶级阶层的策略。&lt;/p&gt;

&lt;p&gt;　　我们从前的调查还有一个极大的缺点，就是偏于农村而不注意城市，以致许多同志对城市贫民和商业资产阶级这二者的策略始终模糊。斗争的发展使我们离开山头跑向平地了&lt;sup id=&quot;fnref:7&quot;&gt;&lt;a href=&quot;#fn:7&quot; class=&quot;footnote&quot;&gt;7&lt;/a&gt;&lt;/sup&gt;，我们的身子早已下山了，但是我们的思想依然还在山上。我们要了解农村，也要了解城市，否则将不能适应革命斗争的需要。&lt;/p&gt;

&lt;h2 id=&quot;六-中国革命斗争的胜利要靠中国同志了解中国情况&quot;&gt;六 中国革命斗争的胜利要靠中国同志了解中国情况&lt;/h2&gt;

&lt;p&gt;　　我们的斗争目的是要从民权主义转变到社会主义。我们的任务第一步是，争取工人阶级的大多数，发动农民群众和城市贫民，打倒地主阶级，打倒帝国主义，打倒国民党政权，完成民权主义革命，由这种斗争的发展，跟着就要执行社会主义革命的任务。这些伟大的革命任务的完成不是简单容易的，它全靠无产阶级政党的斗争策略的正确和坚决。倘若无产阶级政党的斗争策略是错误的，或者是动摇犹豫的，那末，革命就非走向暂时的失败不可，须知资产阶级政党也是天天在那里讨论斗争策略的，他们的问题是怎样在工人阶级中传播改良主义影响，使工人阶级受他们的欺骗，而脱离共产党的领导，怎样争取富农去消灭贫农的暴动，怎样组织流氓去镇压革命等等。在这样日益走向尖锐的短兵相接的阶级斗争的形势之下，无产阶级要取得胜利，就完全要靠他的政党——共产党的斗争策略的正确和坚决。共产党的正确而不动摇的斗争策略，决不是少数人坐在房子里能够产生的，它是要在群众的斗争过程中才能产生的，这就是说要在实际经验中才能产生。因此，我们需要时时了解社会情况，时时进行实际调查。那些具有一成不变的保守的形式的空洞乐观的头脑的同志们，以为现在的斗争策略已经是再好没有了，党的第六次全国代表大会的「本本」&lt;sup id=&quot;fnref:8&quot;&gt;&lt;a href=&quot;#fn:8&quot; class=&quot;footnote&quot;&gt;8&lt;/a&gt;&lt;/sup&gt;保障了永久的胜利，只要遵守既定办法就无往而不胜利。这些想法是完全错误的，完全不是共产党人从斗争中创造新局面的思想路线，完全是一种保守路线。这种保守路线如不根本丢掉，将会给革命造成很大损失，也会害了这些同志自己。红军中显然有一部分同志是安于现状，不求甚解，空洞乐观，提倡所谓「无产阶级就是这样」的错误思想，饱食终日，坐在机关里面打瞌睡，从不肯伸只脚到社会群众中去调查调查。对人讲话一向是那几句老生常谈，使人厌听。我们要大声疾呼，唤醒这些同志：&lt;/p&gt;

&lt;p&gt;　　速速改变保守思想！&lt;/p&gt;

&lt;p&gt;　　换取共产党人的进步的斗争思想！&lt;/p&gt;

&lt;p&gt;　　到斗争中去！&lt;/p&gt;

&lt;p&gt;　　到群众中作实际调查去！&lt;/p&gt;

&lt;h2 id=&quot;七-调查的技术&quot;&gt;七 调查的技术&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;要开调查会作讨论式的调查&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;只有这样才能近于正确，才能抽出结论。那种不开调查会，不作讨论式的调查，只凭一个人讲他的经验的方法，是容易犯错误的。那种只随便问一下子，不提出中心问题在会议席上经过辩论的方法，是不能抽出近于正确的结论的。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;调查会到些什么人？&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;要是能深切明了社会经济情况的人。以年龄说，老年人最好，因为他们有丰富的经验，不但懂得现状，而且明白因果。有斗争经验的青年人也要，因为他们有进步的思想，有锐利的观察。以职业说，工人也要，农民也要，商人也要，知识分子也要，有时兵士也要，流氓也要。自然，调查某个问题时，和那个问题无关的人不必在座，如调查商业时，工农学各业不必在座。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;开调查会人多好还是人少好？&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;看调查人的指挥能力。那种善于指挥的，可以多到十几个人或者二十几个人。人多有人多的好处，就是在做统计时（如征询贫农占农民总数的百分之几），在做结论时（如征询土地分配平均分好还是差别分好），能得到比较正确的回答，自然人多也有人多的坏处，指挥能力欠缺的人会无法使会场得到安静。究竟人多人少，要依调查人的情况决定。但是至少需要三人，不然会囿于见闻，不符合真实情况。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;要定调查纲目&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;纲目要事先准备，调查人按照纲目发问，会众口说。不明了的，有疑义的，提起辩论。所谓「调查纲目」，要有大纲，还要有细目，如「商业」是个大纲，「布匹」，「粮食」，「杂货」，「药材」都是细目，布匹下再分「洋布」，「土布」，「绸缎」各项细目。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;要亲身出马&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;凡担负指导工作的人，从乡政府主席到全国中央政府主席，从大队长到总司令，从支部书记到总书记，一定都要亲身从事社会经济的实际调查，不能单靠书面报告，因为二者是两回事。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;要深入&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;初次从事调查工作的人，要作一两回深入的调查工作，就是要了解一处地方（例如一个农村、一个城市），或者一个问题（例如粮食问题、货币问题）的底里。深切地了解一处地方或者一个问题了。往后调查别处地方、别个问题，便容易找到门路了。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;要自己做记录&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;调查不但要自己当主席，适当地指挥调查会的到会人，而且要自己做记录，把调查的结果记下来。假手于人是不行的。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;毛泽东的这篇文章是为了反对当时红军中的教条主义思想而写的。那时没有用「教条主义」这个名称，而叫它做「本本主义」。&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;一九三一年四月二日毛泽东在《总政治部关于调查人口和土地状况的通知》中，对「没有调查，没有发言权」的论断作了补充和发展，提出「我们的口号是：一，不做调查没有发言权。二，不做正确的调查同样没有发言权。」 &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;见《论语·八佾》。原文是：「子入太庙，每事问。」 &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;李逵是《水浒传》中的一个英雄人物。他朴直豪爽，对农民革命事业很忠诚，但是处事鲁莽。 &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot;&gt;
      &lt;p&gt;毛泽东历来重视调查工作，把进行社会调查作为领导工作的首要任务和决定政策的基础，在毛泽东的倡导下，红军第四军的调查工作逐渐地开展起来。毛泽东还把进行社会调查规定为工作制度，红军政治部制订了详细的调查表，包括群众斗争状况、反动派状况、经济生活情况和农村各阶级占有土地的情况等项目。红军每到一个地方，都首先要弄清当地的阶级关系状况，然后再提出切合群众需要的口号。 &lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:5&quot;&gt;
      &lt;p&gt;这里是指中农。 &lt;a href=&quot;#fnref:5&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:6&quot;&gt;
      &lt;p&gt;见《毛泽东选集》第一卷《中国社会各阶级的分析》注[10]。 &lt;a href=&quot;#fnref:6&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:7&quot;&gt;
      &lt;p&gt;这里所说的山头指江西、湖南边界的井冈山地区，平地指江西南部福建西部地区。一九二九年一月，毛泽东、朱德率领红军第四军的主力，自井冈山出发，向江西南部、福建西部进军，开辟赣南、闽西两大革命根据地。 &lt;a href=&quot;#fnref:7&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:8&quot;&gt;
      &lt;p&gt;指一九二八年六月至七月召开的中国共产党第六次全国代表大会通过的备项决议案。一九二九年初，红军第四军前敌委员会曾经把这些决议案汇集印成单行本，发给红军和地方的党组织。 &lt;a href=&quot;#fnref:8&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Austin</name></author><category term="Society" /><category term="Politics" /><summary type="html">毛泽东</summary></entry><entry><title type="html">中国地形图</title><link href="http://localhost:4000/docs/2020/07/11/ChinaMap/" rel="alternate" type="text/html" title="中国地形图" /><published>2020-07-11T00:00:00+08:00</published><updated>2020-07-11T00:00:00+08:00</updated><id>http://localhost:4000/docs/2020/07/11/ChinaMap</id><content type="html" xml:base="http://localhost:4000/docs/2020/07/11/ChinaMap/">&lt;p&gt;中国详细地形图。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&quot;全国&quot;&gt;全国&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/images/2020-07-11/中国详细地形图.jpg&quot; class=&quot;full-image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;北方地区&quot;&gt;北方地区&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/images/2020-07-11/北方地区.jpg&quot; class=&quot;full-image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;南方地区&quot;&gt;南方地区&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/images/2020-07-11/南方地区.jpg&quot; class=&quot;full-image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;青藏地区&quot;&gt;青藏地区&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/images/2020-07-11/青藏地区.jpg&quot; class=&quot;full-image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;新疆地区&quot;&gt;新疆地区&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/images/2020-07-11/新疆地区.jpg&quot; class=&quot;full-image&quot; /&gt;&lt;/p&gt;</content><author><name>Austin</name></author><category term="Map" /><summary type="html">中国详细地形图。</summary></entry><entry><title type="html">Notes of 「History of Rock」</title><link href="http://localhost:4000/notes/2020/07/04/HistoryOfRock/" rel="alternate" type="text/html" title="Notes of 「History of Rock」" /><published>2020-07-04T00:00:00+08:00</published><updated>2020-07-04T00:00:00+08:00</updated><id>http://localhost:4000/notes/2020/07/04/HistoryOfRock</id><content type="html" xml:base="http://localhost:4000/notes/2020/07/04/HistoryOfRock/">&lt;p&gt;Notes of &lt;em&gt;History of Rock&lt;/em&gt; (from the American perspective) on coursera,
accompanied by the &lt;a href=&quot;https://www.youtube.com/playlist?list=PL3a9j60GMCIr3oeTHfj71yIp54bFOUo5s&quot;&gt;YouTube playlist&lt;/a&gt;.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&quot;the-world-before-rock-and-roll-1900-1955&quot;&gt;The World Before Rock and Roll (1900-1955)&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Mainstream pop&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Country &amp;amp; Western&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Rhythm &amp;amp; Blues&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;the-birth-and-first-flourishing-of-rock-and-roll-1955-59&quot;&gt;The Birth and First Flourishing of Rock and Roll (1955-59)&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Before Elvis Presley&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Elvis Presley&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;After Elvis Presley’s initial success&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;the-demise-of-rock-and-the-promise-of-soul-1959-63&quot;&gt;The Demise of Rock and the Promise of Soul (1959-63)&lt;/h2&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;the-beatles-and-the-british-invasion-1964-66&quot;&gt;The Beatles and the British Invasion (1964-66)&lt;/h2&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;american-responses-1965-67&quot;&gt;American Responses (1965-67)&lt;/h2&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;motown-pop-and-southern-soul-1960-69&quot;&gt;Motown Pop and Southern Soul (1960-69)&lt;/h2&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;psychedelia-1966-69&quot;&gt;Psychedelia (1966-69)&lt;/h2&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;the-growing-rock-monster-1970-77&quot;&gt;The Growing Rock Monster (1970-77)&lt;/h2&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;black-pop-reggae-and-the-rise-of-disco-1970-79&quot;&gt;Black Pop, Reggae, and the Rise of Disco (1970-79)&lt;/h2&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;mainstream-rock-punk-and-new-wave-1975-79&quot;&gt;Mainstream Rock, Punk, and New Wave (1975-79)&lt;/h2&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;i-want-my-mtv-1980-89&quot;&gt;I Want My MTV (1980-89)&lt;/h2&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;heavy-metal-rap-and-indie-rock-1980-89&quot;&gt;Heavy Metal, Rap, and Indie Rock (1980-89)&lt;/h2&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;alternative-rock-rock-alternatives-and-widening-gaps-the-1990s&quot;&gt;Alternative Rock, Rock Alternatives, and Widening Gaps (the 1990s)&lt;/h2&gt;</content><author><name>Austin</name></author><category term="RockNRoll" /><summary type="html">Notes of History of Rock (from the American perspective) on coursera, accompanied by the YouTube playlist.</summary></entry><entry><title type="html">A practical introduction to functional programming</title><link href="http://localhost:4000/technology/2020/07/01/FunctionalProgramming/" rel="alternate" type="text/html" title="A practical introduction to functional programming" /><published>2020-07-01T00:00:00+08:00</published><updated>2020-07-01T00:00:00+08:00</updated><id>http://localhost:4000/technology/2020/07/01/FunctionalProgramming</id><content type="html" xml:base="http://localhost:4000/technology/2020/07/01/FunctionalProgramming/">&lt;p&gt;&lt;strong&gt;Mary Rose Cook&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://maryrosecook.com/blog/post/a-practical-introduction-to-functional-programming&quot;&gt;Original link&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Many functional programming articles teach abstract functional techniques. That is, composition, pipelining, higher order functions. This one is different. It shows examples of imperative, unfunctional code that people write every day and translates these examples to a functional style.&lt;/p&gt;

&lt;p&gt;The first section of the article takes short, data transforming loops and translates them into functional maps and reduces. The second section takes longer loops, breaks them up into units and makes each unit functional. The third section takes a loop that is a long series of successive data transformations and decomposes it into a functional pipeline.&lt;/p&gt;

&lt;p&gt;The examples are in Python, because many people find Python easy to read. A number of the examples eschew pythonicity in order to demonstrate functional techniques common to many languages: map, reduce, pipeline. All of the examples are in Python 2.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;a-guide-rope&quot;&gt;A guide rope&lt;/h2&gt;

&lt;p&gt;When people talk about functional programming, they mention a dizzying number of “functional” characteristics. They mention immutable data&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;, first class functions&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; and tail call optimisation&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;. These are language features that aid functional programming. They mention mapping, reducing, pipelining, recursing, currying&lt;sup id=&quot;fnref:4&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt; and the use of higher order functions. These are programming techniques used to write functional code. They mention parallelization&lt;sup id=&quot;fnref:5&quot;&gt;&lt;a href=&quot;#fn:5&quot; class=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;, lazy evaluation&lt;sup id=&quot;fnref:6&quot;&gt;&lt;a href=&quot;#fn:6&quot; class=&quot;footnote&quot;&gt;6&lt;/a&gt;&lt;/sup&gt; and determinism&lt;sup id=&quot;fnref:7&quot;&gt;&lt;a href=&quot;#fn:7&quot; class=&quot;footnote&quot;&gt;7&lt;/a&gt;&lt;/sup&gt;. These are advantageous properties of functional programs.&lt;/p&gt;

&lt;p&gt;Ignore all that. Functional code is characterised by one thing: the absence of side effects. It doesn’t rely on data outside the current function, and it doesn’t change data that exists outside the current function. Every other “functional” thing can be derived from this property. Use it as a guide rope as you learn.&lt;/p&gt;

&lt;p&gt;This is an unfunctional function:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;global&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is a functional function:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;dont-iterate-over-lists-use-map-and-reduce&quot;&gt;Don’t iterate over lists. Use map and reduce.&lt;/h2&gt;

&lt;h3 id=&quot;map&quot;&gt;Map&lt;/h3&gt;

&lt;p&gt;Map takes a function and a collection of items. It makes a new, empty collection, runs the function on each item in the original collection and inserts each return value into the new collection. It returns the new collection.&lt;/p&gt;

&lt;p&gt;This is a simple map that takes a list of names and returns a list of the lengths of those names:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;name_lengths&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Mary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Isla&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Sam&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name_lengths&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [4, 4, 3]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is a map that squares every number in the passed collection:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;squares&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;squares&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [0, 1, 4, 9, 16]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This map doesn’t take a named function. It takes an anonymous, inlined function defined with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lambda&lt;/code&gt;. The parameters of the lambda are defined to the left of the colon. The function body is defined to the right of the colon. The result of running the function body is (implicitly) returned.&lt;/p&gt;

&lt;p&gt;The unfunctional code below takes a list of real names and replaces them with randomly assigned code names.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;random&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;names&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Mary'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Isla'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Sam'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;code_names&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Mr. Pink'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Mr. Orange'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Mr. Blonde'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;choice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code_names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; ['Mr. Blonde', 'Mr. Blonde', 'Mr. Blonde']
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(As you can see, this algorithm can potentially assign the same secret code name to multiple secret agents. Hopefully, this won’t be a source of confusion during the secret mission.)&lt;/p&gt;

&lt;p&gt;This can be rewritten as a map:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;random&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;names&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Mary'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Isla'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Sam'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;secret_names&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;choice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Mr. Pink'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                            &lt;span class=&quot;s&quot;&gt;'Mr. Orange'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                            &lt;span class=&quot;s&quot;&gt;'Mr. Blonde'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt;
                   &lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Exercise 1&lt;/strong&gt;. Try rewriting the code below as a map. It takes a list of real names and replaces them with code names produced using a more robust strategy.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;names&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Mary'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Isla'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Sam'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [6306819796133686941, 8135353348168144921, -1228887169324443034]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(Hopefully, the secret agents will have good memories and won’t forget each other’s secret code names during the secret mission.)&lt;/p&gt;

&lt;p&gt;My solution:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;names&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Mary'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Isla'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Sam'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;secret_names&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;reduce&quot;&gt;Reduce&lt;/h3&gt;

&lt;p&gt;Reduce takes a function and a collection of items. It returns a value that is created by combining the items.&lt;/p&gt;

&lt;p&gt;This is a simple reduce. It returns the sum of all the items in the collection.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt; is the current item being iterated over. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt; is the accumulator. It is the value returned by the execution of the lambda on the previous item. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reduce()&lt;/code&gt; walks through the items. For each one, it runs the lambda on the current &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt; and returns the result as the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt; of the next iteration.&lt;/p&gt;

&lt;p&gt;What is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt; in the first iteration? There is no previous iteration result for it to pass along. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reduce()&lt;/code&gt; uses the first item in the collection for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt; in the first iteration and starts iterating at the second item. That is, the first &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt; is the second item.&lt;/p&gt;

&lt;p&gt;This code counts how often the word &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'Sam'&lt;/code&gt; appears in a list of strings:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sentences&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Mary read a story to Sam and Isla.'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
             &lt;span class=&quot;s&quot;&gt;'Isla cuddled Sam.'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
             &lt;span class=&quot;s&quot;&gt;'Sam chortled.'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;sam_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sentence&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sentences&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sam_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sentence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Sam'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sam_count&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is the same code written as a reduce:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sentences&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Mary read a story to Sam and Isla.'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
             &lt;span class=&quot;s&quot;&gt;'Isla cuddled Sam.'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
             &lt;span class=&quot;s&quot;&gt;'Sam chortled.'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;sam_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Sam'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                   &lt;span class=&quot;n&quot;&gt;sentences&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                   &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;How does this code come up with its initial &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt;? The starting point for the number of incidences of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'Sam'&lt;/code&gt; cannot be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'Mary read a story to Sam and Isla.'&lt;/code&gt; The initial accumulator is specified with the third argument to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reduce()&lt;/code&gt;. This allows the use of a value of a different type from the items in the collection.&lt;/p&gt;

&lt;p&gt;Why are map and reduce better?&lt;/p&gt;

&lt;p&gt;First, they are often one-liners.&lt;/p&gt;

&lt;p&gt;Second, the important parts of the iteration - the collection, the operation and the return value - are always in the same places in every map and reduce.&lt;/p&gt;

&lt;p&gt;Third, the code in a loop may affect variables defined before it or code that runs after it. By convention, maps and reduces are functional.&lt;/p&gt;

&lt;p&gt;Fourth, map and reduce are elemental operations. Every time a person reads a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;for&lt;/code&gt; loop, they have to work through the logic line by line. There are few structural regularities they can use to create a scaffolding on which to hang their understanding of the code. In contrast, map and reduce are at once building blocks that can be combined into complex algorithms, and elements that the code reader can instantly understand and abstract in their mind. “Ah, this code is transforming each item in this collection. It’s throwing some of the transformations away. It’s combining the remainder into a single output.”&lt;/p&gt;

&lt;p&gt;Fifth, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reduce&lt;/code&gt; have many friends that provide useful, tweaked versions of their basic behaviour. For example: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;filter&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;all&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;any&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;find&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Exercise 2.&lt;/strong&gt; Try rewriting the code below using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reduce&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;filter&lt;/code&gt;. Filter takes a function and a collection. It returns a collection of every item for which the function returned &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;True&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;people&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Mary'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'height'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;160&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Isla'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'height'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Sam'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;height_total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;height_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;person&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;people&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'height'&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;height_total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'height'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;height_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;average_height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height_total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height_count&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;average_height&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 120
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If this seems tricky, try not thinking about the operations on the data. Think of the states the data will go through, from the list of people dictionaries to the average height. Don’t try and bundle multiple transformations together. Put each on a separate line and assign the result to a descriptively-named variable. Once the code works, condense it.&lt;/p&gt;

&lt;p&gt;My solution:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;people&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Mary'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'height'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;160&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Isla'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'height'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Sam'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;heights&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'height'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
              &lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'height'&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;people&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;heights&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;operator&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;average_height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heights&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;heights&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;write-declaratively-not-imperatively&quot;&gt;Write declaratively, not imperatively&lt;/h2&gt;

&lt;p&gt;The program below runs a race between three cars. At each time step, each car may move forwards or it may stall. At each time step, the program prints out the paths of the cars so far. After five time steps, the race is over.&lt;/p&gt;

&lt;p&gt;This is some sample output:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-
--
--

--
--
---

---
--
---

----
---
----

----
----
-----
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is the program:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;random&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;car_positions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# decrease time
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car_positions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# move car
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;car_positions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# draw car
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'-'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car_positions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The code is written imperatively. A functional version would be declarative. It would describe what to do, rather than how to do it.&lt;/p&gt;

&lt;h3 id=&quot;use-functions&quot;&gt;Use functions&lt;/h3&gt;

&lt;p&gt;A program can be made more declarative by bundling pieces of the code into functions.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;random&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;move_cars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;enumerate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car_positions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;car_positions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;draw_car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car_position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'-'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car_position&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run_step_of_race&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;global&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;move_cars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car_position&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car_positions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;draw_car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car_position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;car_positions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;run_step_of_race&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To understand this program, the reader just reads the main loop. “If there is time left, run a step of the race and draw. Check the time again.” If the reader wants to understand more about what it means to run a step of the race, or draw, they can read the code in those functions.&lt;/p&gt;

&lt;p&gt;There are no comments any more. The code describes itself.&lt;/p&gt;

&lt;p&gt;Splitting code into functions is a great, low brain power way to make code more readable.&lt;/p&gt;

&lt;p&gt;This technique uses functions, but it uses them as sub-routines. They parcel up code. The code is not functional in the sense of the guide rope. The functions in the code use state that was not passed as arguments. They affect the code around them by changing external variables, rather than by returning values. To check what a function really does, the reader must read each line carefully. If they find an external variable, they must find its origin. They must see what other functions change that variable.&lt;/p&gt;

&lt;h3 id=&quot;remove-state&quot;&gt;Remove state&lt;/h3&gt;

&lt;p&gt;This is a functional version of the car race code:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;random&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;move_cars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car_positions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.3&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
               &lt;span class=&quot;n&quot;&gt;car_positions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;output_car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car_position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'-'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car_position&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run_step_of_race&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'time'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'time'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;'car_positions'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;move_cars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'car_positions'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output_car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'car_positions'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;race&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'time'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;race&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run_step_of_race&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;race&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'time'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;'car_positions'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The code is still split into functions, but the functions are functional. There are three signs of this. First, there are no longer any shared variables. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;time&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;car_positions&lt;/code&gt; get passed straight into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;race()&lt;/code&gt;. Second, functions take parameters. Third, no variables are instantiated inside functions. All data changes are done with return values. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;race()&lt;/code&gt; recurses&lt;sup id=&quot;fnref:3:1&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; with the result of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;run_step_of_race()&lt;/code&gt;. Each time a step generates a new state, it is passed immediately into the next step.&lt;/p&gt;

&lt;p&gt;Now, here are two functions, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zero()&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;one()&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;zero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zero()&lt;/code&gt; takes a string, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s&lt;/code&gt;. If the first character is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'0'&lt;/code&gt;, it returns the rest of the string. If it is not, it returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;None&lt;/code&gt;, the default return value of Python functions. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;one()&lt;/code&gt; does the same, but for a first character of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'1'&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Imagine a function called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rule_sequence()&lt;/code&gt;. It takes a string and a list of rule functions of the form of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zero()&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;one()&lt;/code&gt;. It calls the first rule on the string. Unless &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;None&lt;/code&gt; is returned, it takes the return value and calls the second rule on it. Unless &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;None&lt;/code&gt; is returned, it takes the return value and calls the third rule on it. And so forth. If any rule returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;None&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rule_sequence()&lt;/code&gt; stops and returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;None&lt;/code&gt;. Otherwise, it returns the return value of the final rule.&lt;/p&gt;

&lt;p&gt;This is some sample input and output:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rule_sequence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'0101'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 1
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rule_sequence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'0101'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; None
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is the imperative version of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rule_sequence()&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rule_sequence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rule&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Exercise 3&lt;/strong&gt;. The code above uses a loop to do its work. Make it more declarative by rewriting it as a recursion.&lt;/p&gt;

&lt;p&gt;My solution:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rule_sequence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rule_sequence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;use-pipelines&quot;&gt;Use pipelines&lt;/h2&gt;

&lt;p&gt;In the previous section, some imperative loops were rewritten as recursions that called out to auxiliary functions. In this section, a different type of imperative loop will be rewritten using a technique called a pipeline.&lt;/p&gt;

&lt;p&gt;The loop below performs transformations on dictionaries that hold the name, incorrect country of origin and active status of some bands.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;bands&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'sunset rubdown'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'country'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'UK'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'active'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'women'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'country'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Germany'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'active'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'a silver mt. zion'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'country'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Spain'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'active'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;format_bands&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bands&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;band&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bands&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;band&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'country'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Canada'&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;band&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;band&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'.'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;band&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;band&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;format_bands&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bands&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bands&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [{'name': 'Sunset Rubdown', 'active': False, 'country': 'Canada'},
#     {'name': 'Women', 'active': False, 'country': 'Canada' },
#     {'name': 'A Silver Mt Zion', 'active': True, 'country': 'Canada'}]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Worries are stirred by the name of the function. “format” is very vague. Upon closer inspection of the code, these worries begin to claw. Three things happen in the same loop. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'country'&lt;/code&gt; key gets set to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'Canada'&lt;/code&gt;. Punctuation is removed from the band name. The band name gets capitalized. It is hard to tell what the code is intended to do and hard to tell if it does what it appears to do. The code is hard to reuse, hard to test and hard to parallelize.&lt;/p&gt;

&lt;p&gt;Compare it with this:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pipeline_each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bands&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_canada_as_country&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;strip_punctuation_from_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;capitalize_names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This code is easy to understand. It gives the impression that the auxiliary functions are functional because they seem to be chained together. The output from the previous one comprises the input to the next. If they are functional, they are easy to verify. They are also easy to reuse, easy to test and easy to parallelize.&lt;/p&gt;

&lt;p&gt;The job of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pipeline_each()&lt;/code&gt; is to pass the bands, one at a time, to a transformation function, like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;set_canada_as_country()&lt;/code&gt;. After the function has been applied to all the bands, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pipeline_each()&lt;/code&gt; bundles up the transformed bands. Then, it passes each one to the next function.&lt;/p&gt;

&lt;p&gt;Let’s look at the transformation functions.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;assoc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;copy&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deepcopy&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deepcopy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;set_canada_as_country&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;band&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;assoc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;band&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'country'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Canada&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;strip_punctuation_from_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;band&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;assoc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;band&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;band&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'.'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;capitalize_names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;band&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;assoc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;band&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;band&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Each one associates a key on a band with a new value. There is no easy way to do this without mutating the original band. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;assoc()&lt;/code&gt; solves this problem by using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;deepcopy()&lt;/code&gt; to produce a copy of the passed dictionary. Each transformation function makes its modification to the copy and returns that copy.&lt;/p&gt;

&lt;p&gt;Everything seems fine. Band dictionary originals are protected from mutation when a key is associated with a new value. But there are two other potential mutations in the code above. In &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;strip_punctuation_from_name()&lt;/code&gt;, the unpunctuated name is generated by calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;replace()&lt;/code&gt; on the original name. In &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;capitalize_names()&lt;/code&gt;, the capitalized name is generated by calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;title()&lt;/code&gt; on the original name. If &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;replace()&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;title()&lt;/code&gt; are not functional, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;strip_punctuation_from_name()&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;capitalize_names()&lt;/code&gt; are not functional.&lt;/p&gt;

&lt;p&gt;Fortunately, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;replace()&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;title()&lt;/code&gt; do not mutate the strings they operate on. This is because strings are immutable in Python. When, for example, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;replace()&lt;/code&gt; operates on a band name string, the original band name is copied and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;replace()&lt;/code&gt; is called on the copy. Phew.&lt;/p&gt;

&lt;p&gt;This contrast between the mutability of strings and dictionaries in Python illustrates the appeal of languages like Clojure. The programmer need never think about whether they are mutating data. They aren’t.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Exercise 4&lt;/strong&gt;. Try and write the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pipeline_each&lt;/code&gt; function. Think about the order of operations. The bands in the array are passed, one band at a time, to the first transformation function. The bands in the resulting array are passed, one band at a time, to the second transformation function. And so forth.&lt;/p&gt;

&lt;p&gt;My solution:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pipeline_each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                  &lt;span class=&quot;n&quot;&gt;fns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                  &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;All three transformation functions boil down to making a change to a particular field on the passed band. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;call()&lt;/code&gt; can be used to abstract that. It takes a function to apply and the key of the value to apply it to.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;set_canada_as_country&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Canada'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'country'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;strip_punctuation_from_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'.'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;capitalize_names&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pipeline_each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bands&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_canada_as_country&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;strip_punctuation_from_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;capitalize_names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Or, if we are willing to sacrifice readability for conciseness, just:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pipeline_each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bands&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Canada'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'country'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'.'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The code for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;call()&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;assoc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;copy&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deepcopy&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deepcopy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;apply_fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;assoc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apply_fn&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There is a lot going on here. Let’s take it piece by piece.&lt;/p&gt;

&lt;p&gt;One. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;call()&lt;/code&gt; is a higher order function. A higher order function takes a function as an argument, or returns a function. Or, like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;call()&lt;/code&gt;, it does both.&lt;/p&gt;

&lt;p&gt;Two. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apply_fn()&lt;/code&gt; looks very similar to the three transformation functions. It takes a record (a band). It looks up the value at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;record[key]&lt;/code&gt;. It calls &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fn&lt;/code&gt; on that value. It assigns the result back to a copy of the record. It returns the copy.&lt;/p&gt;

&lt;p&gt;Three. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;call()&lt;/code&gt; does not do any actual work. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apply_fn()&lt;/code&gt;, when called, will do the work. In the example of using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pipeline_each()&lt;/code&gt; above, one instance of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apply_fn()&lt;/code&gt; will set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'country'&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'Canada'&lt;/code&gt; on a passed band. Another instance will capitalize the name of a passed band.&lt;/p&gt;

&lt;p&gt;Four. When an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apply_fn()&lt;/code&gt; instance is run, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fn&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;key&lt;/code&gt; will not be in scope. They are neither arguments to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apply_fn()&lt;/code&gt;, nor locals inside it. But they will still be accessible. When a function is defined, it saves references to the variables it closes over: those that were defined in a scope outside the function and that are used inside the function. When the function is run and its code references a variable, Python looks up the variable in the locals and in the arguments. If it doesn’t find it there, it looks in the saved references to closed over variables. This is where it will find &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fn&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;key&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Five. There is no mention of bands in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;call()&lt;/code&gt; code. That is because &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;call()&lt;/code&gt; could be used to generate pipeline functions for any program, regardless of topic. Functional programming is partly about building up a library of generic, reusable, composable functions.&lt;/p&gt;

&lt;p&gt;Good job. Closures, higher order functions and variable scope all covered in the space of a few paragraphs. Have a nice glass of lemonade.&lt;/p&gt;

&lt;p&gt;There is one more piece of band processing to do. That is to remove everything but the name and country. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;extract_name_and_country()&lt;/code&gt; can pull that information out:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;extract_name_and_country&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;band&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;plucked_band&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;plucked_band&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;band&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;plucked_band&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'country'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;band&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'country'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plucked_band&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pipeline_each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bands&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Canada'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'country'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'.'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;extract_name_and_country&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [{'name': 'Sunset Rubdown', 'country': 'Canada'},
#     {'name': 'Women', 'country': 'Canada'},
#     {'name': 'A Silver Mt Zion', 'country': 'Canada'}]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;extract_name_and_country()&lt;/code&gt; could have been written as a generic function called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pluck()&lt;/code&gt;. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pluck()&lt;/code&gt; would be used like this:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pipeline_each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bands&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Canada'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'country'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'.'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;pluck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'country'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Exercise 5&lt;/strong&gt;. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pluck()&lt;/code&gt; takes a list of keys to extract from each record. Try and write it. It will need to be a higher order function.&lt;/p&gt;

&lt;p&gt;My solution:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pluck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pluck_fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;assoc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt;
                      &lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                      &lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pluck_fn&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;what-now&quot;&gt;What now?&lt;/h2&gt;

&lt;p&gt;Functional code co-exists very well with code written in other styles. The transformations in this article can be applied to any code base in any language. Try applying them to your own code.&lt;/p&gt;

&lt;p&gt;Think of Mary, Isla and Sam. Turn iterations of lists into maps and reduces.&lt;/p&gt;

&lt;p&gt;Think of the race. Break code into functions. Make those functions functional. Turn a loop that repeats a process into a recursion.&lt;/p&gt;

&lt;p&gt;Think of the bands. Turn a sequence of operations into a pipeline.&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;An immutable piece of data is one that cannot be changed. Some languages, like Clojure, make all values immutable by default. Any “mutating” operations copy the value, change it and pass back the changed copy. This eliminates bugs that arise from a programmer’s incomplete model of the possible states their program may enter. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;Languages that support first class functions allow functions to be treated like any other value. This means they can be created, passed to functions, returned from functions and stored inside data structures. &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;Tail call optimisation is a programming language feature. Each time a function recurses, a new stack frame is created. A stack frame is used to store the arguments and local values for the current function invocation. If a function recurses a large number of times, it is possible for the interpreter or compiler to run out of memory. Languages with tail call optimisation reuse the same stack frame for their entire sequence of recursive calls. Languages like Python that do not have tail call optimisation generally limit the number of times a function may recurse to some number in the thousands. In the case of the race() function, there are only five time steps, so it is safe. &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt; &lt;a href=&quot;#fnref:3:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot;&gt;
      &lt;p&gt;Currying means decomposing a function that takes multiple arguments into a function that takes the first argument and returns a function that takes the next argument, and so forth for all the arguments. &lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:5&quot;&gt;
      &lt;p&gt;Parallelization means running the same code concurrently without synchronization. These concurrent processes are often run on multiple processors. &lt;a href=&quot;#fnref:5&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:6&quot;&gt;
      &lt;p&gt;Lazy evaluation is a compiler technique that avoids running code until the result is needed. &lt;a href=&quot;#fnref:6&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:7&quot;&gt;
      &lt;p&gt;A process is deterministic if repetitions yield the same result every time. &lt;a href=&quot;#fnref:7&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Austin</name></author><category term="FunctionalProgramming" /><summary type="html">Mary Rose Cook</summary></entry><entry><title type="html">读「文学理论」</title><link href="http://localhost:4000/notes/2020/06/28/%E6%96%87%E5%AD%A6%E7%90%86%E8%AE%BA/" rel="alternate" type="text/html" title="读「文学理论」" /><published>2020-06-28T00:00:00+08:00</published><updated>2020-06-28T00:00:00+08:00</updated><id>http://localhost:4000/notes/2020/06/28/%E6%96%87%E5%AD%A6%E7%90%86%E8%AE%BA</id><content type="html" xml:base="http://localhost:4000/notes/2020/06/28/%E6%96%87%E5%AD%A6%E7%90%86%E8%AE%BA/">&lt;p&gt;&lt;strong&gt;René Wellek, Austin Warren&lt;/strong&gt;&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&quot;基本信息&quot;&gt;基本信息&lt;/h2&gt;

&lt;p&gt;作者：René Wellek， 耶鲁大学比较文学教授。Austin Warren，密歇根大学英语教授。&lt;/p&gt;

&lt;p&gt;原本：Theory of Literature, 1956&lt;/p&gt;

&lt;p&gt;译者：刘象愚 等&lt;/p&gt;

&lt;p&gt;出版社：浙江人民出版社&lt;/p&gt;

&lt;p&gt;版次：2017 年 2 月第 1 版&lt;/p&gt;

&lt;h2 id=&quot;文摘笔记&quot;&gt;文摘笔记&lt;/h2&gt;

&lt;h3 id=&quot;第一部分-定义和区分&quot;&gt;第一部分 定义和区分&lt;/h3&gt;

&lt;h4 id=&quot;第一章-文学和文学研究&quot;&gt;第一章 文学和文学研究&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;我们首先必须区别文学和文学研究。
这是两种截然不同的活动：
文学是创造性的，是一种艺术；
而文学研究，如果称之为科学不太确切的话，也应该说是一门知识或学问。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;我们为什么要研究莎士比亚？
显然，我们感兴趣的不是他页众人有什么共同之处，否则我们可以去研究任何一个人
······ 我们要寻找的是莎士比亚的独到之处，
即莎士比亚之所以成为莎士比亚的东西；
这明显是个性和价值的问题。
甚至在研究一个时期、一个文学运动或者一个特定国家的文学时，
文学研究者感兴趣的也只是它们有别于同类其他事物的个性以及它们的特异面貌和性质。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;须知每一文学作品都兼具一般性和特殊性，
或者更好的说法是兼具个性和一般性。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;我们这种设想并不轻视共鸣理解和阅读享受作为我们对文学的认识和思考的先决条件和重要性，
但这些只是先决条件而已。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;第二章-文学的本质&quot;&gt;第二章 文学的本质&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;语言是文学的材料，
就像石头和铜是雕刻的材料，
颜料是绘画的材料或声音是音乐的材料一样。
······ 必须弄清楚文学的、日常的和科学的这几种语言在用法上的主要区别。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;文学的本质最清楚的显现于文学所涉猎的范畴中。
文学艺术的中心显然是在抒情诗、史诗和戏剧等传统的文学类型上。
它们处理的都是一个虚构的世界、想象的世界。
······ 如果我们承认「虚构性（fictionality）」、「创造性（invention）」或「想象性（imagination）」
是文学的突出特征，那么我们就是以荷马（Homer）、但丁（Dante）、
莎士比亚、巴尔扎克、济慈（J. Keats）等人的作品为文学 ······&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;第三章-文学的作用&quot;&gt;第三章 文学的作用&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;整个美学史几乎可以概括为一个辩证法，其中的正题和反题就是贺拉斯（Horace）
所说的「甜美（dulce）」和「有用（utile）」，
即诗是甜美而有用的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;第四章-文学理论文学批评和文学史&quot;&gt;第四章 文学理论、文学批评和文学史&lt;/h4&gt;

&lt;h4 id=&quot;第五章-总体文学比较文学和民族文学&quot;&gt;第五章 总体文学、比较文学和民族文学&lt;/h4&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;第二部分-初步工作&quot;&gt;第二部分 初步工作&lt;/h3&gt;

&lt;h4 id=&quot;第六章-论据的编排与确定&quot;&gt;第六章 论据的编排与确定&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;学术研究的第一步工作，就是搜集研究材料，细心地排除时间的影响，
考证作品的作者、真伪和创作日期。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;第三部分-文学的外部研究&quot;&gt;第三部分 文学的外部研究&lt;/h3&gt;

&lt;h4 id=&quot;引言&quot;&gt;引言&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;文学作品产生于某些条件下，
没有人能否认适当地认识这些条件有助于理解文学作品；
而且这种研究法在作品释义上的价值，似乎是无可置疑的。
但是，研究起因显然绝不可能解决对文学艺术作品这一对象的描述、
分析和评价等问题。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;大部分研究者试图把某一系列的人类活动和创造孤立地提出来，
作为决定文学作品的唯一因素。
因此，有一派人士认为文学主要是创作者个人的产品，
于是便断定文学研究主要必须从考察作者的生平和心理着手。
第二派人士从人类组织化的生活中 —— 经济的、社会的和政治的条件中 ——
探索文学创作的决定性因素；
另有一派的观点与此相关，他们主要从人类精神的集体创造活动如思想史、
神学史和其他的艺术中，探索文学的起因。
最后，还有一派人士要以「时代精神（Zeitgeist）」，
即一个时代的精神实质、知识界气氛或舆论环境以及从其他艺术的特质中抽取出来的一元性力量，
来解释文学。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;第七章-文学和传记&quot;&gt;第七章 文学和传记&lt;/h4&gt;

&lt;h4 id=&quot;第八章-文学和心理学&quot;&gt;第八章 文学和心理学&lt;/h4&gt;

&lt;h4 id=&quot;第九章-文学和社会&quot;&gt;第九章 文学和社会&lt;/h4&gt;

&lt;h4 id=&quot;第十章-文学和思想&quot;&gt;第十章 文学和思想&lt;/h4&gt;

&lt;h4 id=&quot;第十一章-文学和其他艺术&quot;&gt;第十一章 文学和其他艺术&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;除了这些显而易见的来源、影响、灵感和合作的问题，
还有一个更重要的问题，
即文学有时确实想要取得绘画的效果，成为文字绘画，
或者想要取得音乐的效果而变成音乐。
有时，诗歌甚至想成为雕刻似的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;第四部分-文学的内部研究&quot;&gt;第四部分 文学的内部研究&lt;/h3&gt;

&lt;h4 id=&quot;引言-1&quot;&gt;引言&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;俄国的形式主义者最激烈地反对「内容与形式」（content versus form）的传统二分法。
这种分法把一件艺术品分割成两半：粗糙的内容和附加于其上的、纯粹的外在形式。
······ 如果把所有于美学没有什么关系的要素称为「材料」（material），
而把这些要素取得美学效果的方式称为「结构」（structure），
可能要好一些。
······ 这样，艺术品就被看成是一个为某种特别的审美目的服务的完整的符号体系或者符号结构。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;第十二章-文学作品的存在方式&quot;&gt;第十二章 文学作品的存在方式&lt;/h4&gt;

&lt;h4 id=&quot;第十三章-谐音节奏和格律&quot;&gt;第十三章 谐音、节奏和格律&lt;/h4&gt;

&lt;h4 id=&quot;第十四章-文体和文体学&quot;&gt;第十四章 文体和文体学&lt;/h4&gt;

&lt;h4 id=&quot;第十五章-意象隐喻象征神话&quot;&gt;第十五章 意象、隐喻、象征、神话&lt;/h4&gt;

&lt;h4 id=&quot;第十六章-叙述性小说的性质和模式&quot;&gt;第十六章 叙述性小说的性质和模式&lt;/h4&gt;

&lt;h4 id=&quot;第十七章-文学的类型&quot;&gt;第十七章 文学的类型&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;文学的种类问题不仅是一个名称的问题，
因为一部文学作品的种类特征是由它所参与其内的美学传统决定的。
文学的各种类别「可被视为惯例性的规则，
这些规则强制着作家去遵守它，反过来又为作家所强制」。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;文学的种类是一个「公共机构」，
正像教会、大学或国家都是公共机构一样。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;文学类型的理论是一个关于秩序的原理，
它把文学和文学史加以分类时，
不是以时间或地域（如时代或民族语言）为标准，
而是以特殊的文学上的组织或结构类型为标准。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;文学类型的理论是否会假设每一部作品都属于某一类型呢？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;类型是否一直保持不变呢？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;大部分现代文学理论倾向于废弃「诗与散文两大类」这种区分方法，
而把想象性文学区分为小说（包括长篇小说、短篇小说和史诗）、
戏剧（不管是用散文还是用韵文写的）和诗（主要指那些相当于古代的「抒情诗」的作品）
三类。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;第十八章-文学的评价&quot;&gt;第十八章 文学的评价&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;我们是否能完全以审美标准来评价一部文学作品呢？
或者像艾略特所建议的那样，
是否需要以审美标准评判文学的文学性，
以超审美标准评判文学的伟大性呢？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;······ 新奇和惊异。人们对平常所熟悉的语言的组合或陈词滥调往往不会立即做出知觉反应，
他们不再把文字看成文字，也不去确切地理解文字联合所指的意义。
······ 语言必须加一「变形」，也就是说，在读者注意到作品的语言之前，必须把语言
或往古代的、远古的方向或往「野蛮化」的方向加以风格化。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;······ 「多义性」，即它们的审美价值必然是非常丰富和广泛的，
以致能在自己的结构中包含一种或者更多种的能给予每一个后来的时代以高度满足的东西。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;在《美学三讲》中，鲍桑葵依据「复杂」「紧张」和「宽度」等标准把
「易美」与「难美」区分开来，
鲍桑葵所表述的两种美的区分可以说就是那种来源与较易处理的材料（如谐音、
令人愉快的视觉意象以及「诗的主题」等）的美与那种从难以对付的材料（如痛苦、
丑恶、说教以及实用的材料等）中费力地得来的美之间的区分。
······ 「难美」和艺术上的「伟大」看起来是等同的 ······&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;第十九章-文学史&quot;&gt;第十九章 文学史&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;写一部文学史，即写一部既是文学的又是历史的书，是可能的吗？
应当承认，大多数的文学史著作，要么是社会史，
要么是文学作品中所阐述的思想史，
要么只是写下对那些多少按编年顺序加以排列的具体文学作品的印象和评价。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;人们不能否认政治史和艺术史之间的某些真正的区别。
这种区别表现在：政治史是历史的和过去的，
而艺术史既是历史的，从某种意义上来看也是现在的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;关于文学时代或文学运动的分期：
（在英国文学中）由于我们现在所使用的这些术语或称呼的来源很复杂，
所以还是显得有些乱。「基督教改革运动」来自基督教会史，
「人道主义」主要来自学术史，「文艺复兴时期」来自艺术史，
「共和政体时期」和「王政复辟时期」则来源于特定的政治事件。
「18 世纪」这一老式的用数字表示的术语已经含有了文学术语的某些功能，
就像「奥古斯都时期」和「新古典主义时期」这些文学术语一样。
「前浪漫主义」和「浪漫主义」原来就是文学术语，
而「维多利亚时代」「爱德华七世时代」和「乔治王朝时代」确实来源于君主们的统治。
这种术语上的混乱几乎在其他任何一种文学中都是存在的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;分期就只是文学一般发展中的细分的小段而已。
它的历史只能参照一个不断变化的价值系统写成，
而这个价值系统必须从历史本身中抽象出来。
因此，一个时期就是一个由文学的规范、标准和惯例的体系所支配的时间的横断面，
这些规范、标准和惯例的被采用、传播、变化、综合以及消失是能够加以探索的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;一些整体的零碎的感想：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;作者有些偷懒地（也许是因为我不具备目标读者的知识储备）使用了大量「主义」
使自己的叙述更加简练，导致不少地方需要猜测或查阅以补齐含义。
不过，这些「主义」并也许不比其字面含义包含有更深刻的内涵。&lt;/li&gt;
  &lt;li&gt;文中不少研究方法、论述，
放在其它艺术的欣赏和研究中，
也具有启发性。&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Austin</name></author><category term="Literature" /><summary type="html">René Wellek, Austin Warren</summary></entry><entry><title type="html">读「设计的意义」</title><link href="http://localhost:4000/notes/2020/06/27/%E8%AE%BE%E8%AE%A1/" rel="alternate" type="text/html" title="读「设计的意义」" /><published>2020-06-27T00:00:00+08:00</published><updated>2020-06-27T00:00:00+08:00</updated><id>http://localhost:4000/notes/2020/06/27/%E8%AE%BE%E8%AE%A1</id><content type="html" xml:base="http://localhost:4000/notes/2020/06/27/%E8%AE%BE%E8%AE%A1/">&lt;p&gt;&lt;strong&gt;Paul Rand&lt;/strong&gt;&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&quot;基本信息&quot;&gt;基本信息&lt;/h2&gt;

&lt;p&gt;作者：Paul Rand，平面设计师，作品包括 IBM，ABC 和 NeXT 等。&lt;/p&gt;

&lt;p&gt;原本：Design, Form and Chaos, 1993&lt;/p&gt;

&lt;p&gt;译者：王娱瑶 等&lt;/p&gt;

&lt;p&gt;出版社：湖南文艺出版社&lt;/p&gt;

&lt;p&gt;版次：2019 年 1 月第 1 版&lt;/p&gt;

&lt;h2 id=&quot;文摘笔记&quot;&gt;文摘笔记&lt;/h2&gt;

&lt;h4 id=&quot;引言&quot;&gt;引言&lt;/h4&gt;

&lt;h4 id=&quot;形式内容&quot;&gt;形式+内容&lt;/h4&gt;

&lt;h4 id=&quot;好的设计就是好的信誉&quot;&gt;好的设计就是好的信誉&lt;/h4&gt;

&lt;h4 id=&quot;直觉与创意&quot;&gt;直觉与创意&lt;/h4&gt;

&lt;h4 id=&quot;logo旗帜和路标&quot;&gt;Logo、旗帜和路标&lt;/h4&gt;

&lt;h4 id=&quot;设计案例演示&quot;&gt;设计案例演示&lt;/h4&gt;

&lt;h4 id=&quot;电脑铅笔和画刷&quot;&gt;电脑、铅笔和画刷&lt;/h4&gt;

&lt;h4 id=&quot;图书设计面面观&quot;&gt;图书设计面面观&lt;/h4&gt;

&lt;h4 id=&quot;一位导师&quot;&gt;一位导师&lt;/h4&gt;

&lt;h4 id=&quot;从卡桑德拉到混沌&quot;&gt;从卡桑德拉到混沌&lt;/h4&gt;</content><author><name>Austin</name></author><category term="Design" /><summary type="html">Paul Rand</summary></entry><entry><title type="html">我们的快乐与哀愁</title><link href="http://localhost:4000/philosophy/2020/06/24/%E6%88%91%E4%BB%AC%E7%9A%84%E5%BF%AB%E4%B9%90%E4%B8%8E%E5%93%80%E6%84%81/" rel="alternate" type="text/html" title="我们的快乐与哀愁" /><published>2020-06-24T00:00:00+08:00</published><updated>2020-06-24T00:00:00+08:00</updated><id>http://localhost:4000/philosophy/2020/06/24/%E6%88%91%E4%BB%AC%E7%9A%84%E5%BF%AB%E4%B9%90%E4%B8%8E%E5%93%80%E6%84%81</id><content type="html" xml:base="http://localhost:4000/philosophy/2020/06/24/%E6%88%91%E4%BB%AC%E7%9A%84%E5%BF%AB%E4%B9%90%E4%B8%8E%E5%93%80%E6%84%81/">&lt;p&gt;&lt;strong&gt;张佳玮&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/awsc-UHUgV8JRGaF0sgWHg&quot;&gt;原文链接&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;人好像都有比较的本能。
少时比较学业成绩，成年后比较伴侣高低，比较房屋质量，比较车的好坏，比较孩子所上学校的学费，
比较家境（哪怕不知道实际数据也要不停揣测）。
当然，到老来就比较儿女的成就，比较儿女孝顺的程度，比较腿脚灵活度······&lt;/p&gt;

&lt;p&gt;《我爱我家》里有一集《恩怨》：
老傅和老胡对着吹牛。老傅说自己儿子是处长，老胡说自己儿子局长。
老傅说自己女儿在美国念书，老胡说自己女儿在美国定居。
最后老傅吹说，自己二儿子在海南当经理，「你没有二儿子和我比了吧？哈哈哈哈！」&lt;/p&gt;

&lt;p&gt;我觉得，比较诡异的两点。
其一，被比较的人，会被纳入一些非本人所愿的、只有比较者才理解的比较基准。&lt;/p&gt;

&lt;p&gt;比如，之前提到过，苏秦纵横六国，而他的势利眼嫂子只看到「位高而多金」。
刘邦也跟他爸爸开过玩笑：「你以前说我不如刘仲家业大，现在怎么样？」
就像我某个读了好几个学位的朋友，在其故乡的比较标准里，只会被归类为：「还没结婚生孩子哪？什么时候生孩子啊？」
就像老傅比老胡多个二儿子，也能乐上半天。&lt;/p&gt;

&lt;p&gt;我之前写到过这个朋友：她讨厌被拿来比较，所以不断延长学业。
因为只要一天还待在校园里，就可以一天躲开各种比较的赛道。
打个比方，就是不愿意上赛道竞逐、宁可独自吃草的马匹。&lt;/p&gt;

&lt;p&gt;我自己是相对被动地，获得了这点不用上赛道的属性：
上大学就离开家乡到了上海，之后也一直没有个单位，后来离开上海，更跑得远了。
对我的故乡亲友而言，我情况特殊，不太好归类。
所以故乡子弟们拿来比长论短时，我（该说是幸运吗）地，并不在列。
嗯，对，归类，一会儿再说。
也因为我并不属于个什么圈子里，只是浮光掠影地接触朋友，也发现不同圈子的不同标准：
比如，在我最初写东西的圈子里，比如杂志报纸写手，吹嘘的是稿费标准，或者自己在哪几家有专栏；
写书的作者，炫耀的是自己加印了多少册；
做艺术的朋友会谈论自己策了多少个展，认识谁谁；
做体育的朋友会说自己采访了谁谁，有谁谁的关系。
至于搞建筑的、画画的、翻译的、做餐饮的、搞旅游的······
各行有各行自己的标准。
—— 按我样本不大的观察：真正专注自己行当的朋友，很少自吹，甚至聊天时，也不太聊自己的本行。
嗯，跑题了。&lt;/p&gt;

&lt;p&gt;大概就是如此：各专业行当，各有自己足以夸耀的标准。
但对更普世的人 —— 比如七大姑八大姨、同学亲友父母兄弟——而言，还是会着重在「有没有钱？有没有生孩子？」
因为这样比较好归类。
于是为了获得时这种世俗意义上的成功，许多人会不知不觉倾斜自己的努力方向，
以便获得「他人眼里可理解的成功」。&lt;/p&gt;

&lt;p&gt;我爱我家的另一集，《姑妈从大洋彼岸来》：老傅和美国的姐姐写信吹牛。
说自己三代同堂，住着富丽堂皇的房子，还把自己已故的老伴吹活了。
「不能让她把我比下去啊！」多滑稽啊。&lt;/p&gt;

&lt;p&gt;这就能延伸到下一点：人很喜欢跟自己相熟的人比较。&lt;/p&gt;

&lt;p&gt;比如，不认识的谁获得了巨大成就？挺好，但不关我事。
小学的同桌发财了？中学的同学成功了？大学舍友成名了？
忽然间，心态就不平衡了。&lt;/p&gt;

&lt;p&gt;《我爱我家》第 30 集《再也不能这样活》里（这一集是昨天那篇的灵感来源），
本来平平静静的贾志国，去了趟同学会，喝了几瓶洋酒，受了刺激。
敢情他那些老同学，个个扬名立万，写书法的成了书法家，画画的成了画家，气得他恼恨：
「要以前少年宫学画时，他画得可不如我啊！」
然后被当年的初恋情人打个的去接他，都自鸣得意一番。
最精妙的是这句：「他现在那房子，满堂的硬木家具，那汽车，那电器，还有那身肥肉，那本应该属于我的呀！」
这种心态，大概跟同侪压力（Peer pressure）有关？&lt;/p&gt;

&lt;p&gt;按照某个实验的说法，大脑会将社会包容度与积极回报联系起来。
社会包容度怎么测算呢？大脑会自己确立某个社会标签对象，然后看自己是否得到该对象的认同。
这个确立对象的过程，我觉得，就是上头所言的，归类。
而人能确立的社会标签对象，基本是自己周遭的社群。
于是便有了「我的群体里人人都成功了，就我不行？压力大了！」&lt;/p&gt;

&lt;p&gt;某方面比不过同辈的谁，会有什么糟糕后果吗？
除非是有直接的竞争关系，比如两个曾经的中学同学如今在争夺同一个职位之类，否则······
好像也没啥？那，为什么会让人焦虑呢？&lt;/p&gt;

&lt;p&gt;某个假说如此推论：
同侪压力本是人类用来适应社会、激励自我而产生的机制。
就像小时候我们如果觉得自己在班级里排名垫底也没啥时，父母会不停灌输排名第一就是好，排名垫底就是糟。
说穿了，这机制是为了让人去努力竞争有限的资源。&lt;/p&gt;

&lt;p&gt;但这种机制一旦滥用了，就会变成另一种焦虑：必须在同辈里样样争第一，哪怕其实没有直接资源之争。
这其实就······没那么必要了。&lt;/p&gt;

&lt;p&gt;还是说《我爱我家》。
某一集老傅说自己对世界贡献大，志国说爱因斯坦不比你强？
逼得老傅只好往回缩，「我就说我是家里贡献最大的不行吗？」
之后就开始列了：家里最高大的，家里唯一使用化名的······
您一定也看出其中的滑稽之处了。
在小圈子里划地自吹，其实真也没必要。
这就是样样争第一的思维，成了惯性吧？&lt;/p&gt;

&lt;p&gt;比如，我现在家里，一男一女一只猫。
我完全可以自吹自己是家里最会打《仁王 2》的男性，
西班牙语最好的男性，拌沙拉最好的男性，也没人跟我争
—— 但这样真有意义吗？其实没有吧？&lt;/p&gt;

&lt;p&gt;尤其是这个时代，特别没必要。
因为在以前那个时代，信息相对不流通，大家要争第一要比较，也只是小范围里的：
楼道里最富裕的一家啦，小区里最成功的一家啦，之类。
目之所及，也就这么回事。压力大也大不到哪里去。老傅还能自吹是家里最厉害的呢。&lt;/p&gt;

&lt;p&gt;而社交网络时代，我们看得见全世界。
那些本来跟我们没关系的，也强行被大脑归类得和我们有关系了。
每天看着世界顶尖，比较失利的挫败感很容易油然而生，而且永无满足之日
—— 其实那些玩意跟自己，并没啥直接关系，
只是社交网络这玩意，让我们产生了似乎有关系的幻觉而已。&lt;/p&gt;

&lt;p&gt;所以，大概是这么回事：&lt;/p&gt;

&lt;p&gt;人的大多数压力，都是为了警示危险、更好地生活而存在的心理机制。
如果某些压力让自己生活不开心了，就可以考虑抛掉了
—— 为了获得自己大脑擅自标定的群体下，一些标签化的认可，于是比较来比较去，那才真是得不偿失呢。
实际上，大多数让我们不太快乐的心理活动，都是过时的自我保护。
实际上，大多数人 —— 无论多熟 —— 对我们的看法，除非是直接的竞争关系，否则没有什么意义。
他们设立的比较标准，包括各种量化来评判成功与否的标准，也只是粗糙的归类。
如果深陷在一个圈子里，竞逐得你死我活，偶尔跳出这个圈子看，会发觉其实特别搞笑。
有过在不同地方求学或生活经历的人，一定明白这个。
大多数的优劣比较，都是自己或他人脑海中的幻觉。
大多数人其实并不真在乎其他人，无论取得（或没取得）世俗意义上的成功。
所以，别活在想象中的比较链里。&lt;/p&gt;

&lt;p&gt;只有一个人在真正经历你的生活，你的悲喜：那就是你自己。&lt;/p&gt;</content><author><name>Austin</name></author><category term="Happiness" /><summary type="html">张佳玮</summary></entry><entry><title type="html">虽然未来如何不能知道</title><link href="http://localhost:4000/arts/2020/06/21/%E8%99%BD%E7%84%B6%E6%9C%AA%E6%9D%A5%E5%A6%82%E4%BD%95%E4%B8%8D%E8%83%BD%E7%9F%A5%E9%81%93/" rel="alternate" type="text/html" title="虽然未来如何不能知道" /><published>2020-06-21T00:00:00+08:00</published><updated>2020-06-21T00:00:00+08:00</updated><id>http://localhost:4000/arts/2020/06/21/%E8%99%BD%E7%84%B6%E6%9C%AA%E6%9D%A5%E5%A6%82%E4%BD%95%E4%B8%8D%E8%83%BD%E7%9F%A5%E9%81%93</id><content type="html" xml:base="http://localhost:4000/arts/2020/06/21/%E8%99%BD%E7%84%B6%E6%9C%AA%E6%9D%A5%E5%A6%82%E4%BD%95%E4%B8%8D%E8%83%BD%E7%9F%A5%E9%81%93/">&lt;p&gt;&lt;strong&gt;张佳玮&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/wsrjlKrXf9MxI7I9FoEOoQ&quot;&gt;原文链接&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;最初，我对李宗盛毫无概念。那会儿我只听歌，还不懂得注意歌背后的人。
我只知道赵传唱了《我终于失去了你》，
只知道张艾嘉唱了《爱的代价》，
只知道辛晓琪唱了《领悟》。
那时似乎许多歌迷，都如此。
我们听的是歌，认的是歌星。
写歌的人是谁？不认得。&lt;/p&gt;

&lt;p&gt;1994 年世界杯后，央视做了个配乐 MV。
用马拉多纳，配《我终于失去了你》。
这个大概只有球迷懂了：33 岁的马拉多纳，那年世界杯药检出了问题，被禁赛，阿根廷淘汰。
我印象最深的一幕是，马拉多纳被铲倒后，起身，
人群已经卷走，马拉多纳跟裁判无奈地挥了挥手。
「我终于失去了你，在拥挤的人群中」。
那种辉煌、惘然中失落的感觉，重锤击心的感觉。&lt;/p&gt;

&lt;p&gt;我第一次有概念「李宗盛的歌」，是杨佩佩工作室电视剧《碧海情天》那剧，刘松仁、李立群和叶童演的。
主题曲《凡人歌》。 我一听就觉得很奇怪。
那时我还小，只觉得歌词真是不够正面。
什么叫「多少同林鸟，已成了分飞燕。」
什么叫「有了梦寐以求的容颜，是否就算是拥有春天？」
偏这家伙 —— 众所周知 —— 唱歌还吊儿郎当的，半念半唱，
「已成了分飞燕」，最后三个字还下重音，你是指望真成了分飞燕是怎么着？&lt;/p&gt;

&lt;p&gt;那时我还小，还不觉得李宗盛唱歌好听。
他唱歌有种大胡茬子味，就像刮完了又长了两天的胡茬子，挂手，蹭人，颗颗粒粒的。
那会儿我的审美，还停留在老辈们播的李谷一和邓丽君：瓷器般圆润流转，羚羊挂角的声音里。&lt;/p&gt;

&lt;p&gt;还是杨佩佩工作室的电视剧，《末代皇孙》。我是冲着周海媚去的。
这里插一句，周海媚真是娇媚妖娆又楚楚可怜，
说句高圆圆粉丝不爱听的话，只论周芷若，高圆圆拼命学，也没学到周海媚的味道。
《末代皇孙》的片头曲，是《鬼迷心窍》。
开头就李宗盛式的大沉重：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;「曾经真的以为人生就这样了，平静的心拒绝再有浪潮」&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;连着几句都是下行音符，听不惯。
但中间，忽然就扬了起来：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;是命运的安排也好，是你存心的捉弄也好。&lt;/p&gt;

  &lt;p&gt;然而这一切已不再重要，我愿意随你到天涯海角。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这份痴劲，忽然就击中我了。
当然那时我还小，还不明白这些词句的意味，不明白他最后为什么要苍凉地叹：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;虽然未来如何不能知道，现在说再见会不会太早&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;后来就知道了，《我是一只小小鸟》，是他写的。
《领悟》，是他写的。
《爱的代价》，是他写的。
后来，《阴天》，后来，许茹芸的《真爱无敌》（空城计？）。
我自己也慢慢长起来了。&lt;/p&gt;

&lt;p&gt;憋着的难过感，听张艾嘉「走吧，走吧，人总要学着自己长大」。
听很久，一口气，呼出去了。
在大学里，自己租了房子一个人住，晚上一个人写稿，抬头看窗外灯火阑珊时，
「我是一只小小小小鸟，小鸟飞呀飞，却怎么也飞不高。」
把背仰上椅子，叹一口气。&lt;/p&gt;

&lt;p&gt;现在想，许多时候，不是李宗盛多完美符合我的心境，
只是年纪渐长，会慢慢地明白他那些词与歌，一鳞半爪地。
然后，会自然地往那边靠。&lt;/p&gt;

&lt;p&gt;对喜欢「为赋新词强说愁」的少年们而言，李宗盛是个很好的对象。
「对啊，他说出了我们的心声！」
哪怕没有那么多「开始总是分分钟都妙不可言」的感觉，也会捧着《阴天》，听。&lt;/p&gt;

&lt;p&gt;再后来，经历的事情多了，真有点明白李宗盛了 —— 不只是代入感的情境。
李宗盛很通透。
他并不高唱颂歌，他很现实：
「多少同林鸟，已成了分飞燕，人生何其短，何必苦苦恋」。
但他也并不遗世独立。他唱男人女人，每个寻常男女的感情。
他知道人事无常，但他挺入世，而且以身作则地享受这点甜与苦中的诗意。&lt;/p&gt;

&lt;p&gt;怎么说呢？他那胡渣子般的嗓音，小时候听，颗颗粒粒，
长大后听，像黑巧克力，像雪茄，甜味不多，主要是苦与酸，以及，厚实。
小孩子时爱吃甜的，长大后，才能懂得品味苦。&lt;/p&gt;

&lt;p&gt;李宗盛不劝你超脱，只是拿着颗颗粒粒的嗓音，半念半唱，自我解嘲似的，说段子。
最代表这种态度的，是《最近比较烦》：动听悦耳的小旋律，自我解嘲的小段子。
玩儿呗。&lt;/p&gt;

&lt;p&gt;我有时候，会想起《鹿鼎记》里的美刀王胡逸之。
看着乡巴佬一般的小老头儿，其实身负绝代武功，却又偏偏对陈圆圆一片痴情，老来犹且如此。
他的痴劲儿，到了这般地步：竟能记住这种细节：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;「这二十三年之中，跟她也只说过三十九句话。她倒向我说过五十五句。」&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;吴六奇试图劝他时，胡逸之如是说：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;「吴兄，人各有志。兄弟是个大傻瓜，你如瞧不起我，咱们就此别过。」&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;这种自知痴得过分，却并不跳出来的劲头，下面这句话里，感慨系之：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;「不知疲倦地翻越每个山丘&lt;/p&gt;

  &lt;p&gt;越过山丘，才发现无人等候」&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;每次听到这句歌词，我老想到《东邪西毒》里张国荣那句话：
「以前看见山，就想知道山的后面是什么。现在我已经不想知道了。」
小时候，总觉得「过了一个节点，一切都好了」。
读书时，相信上了大学一切都好了。
上大学时写东西，觉得自己出版第一本书后一切都好了。
总觉得过了一关，就什么都好了。&lt;/p&gt;

&lt;p&gt;然而并非如此。
世上并没有一个「你过去了，从此无烦忧」的山丘。
爱别离，怨憎会，求不得，不消多提。
时间流逝最让人难过的真相是，年少时总还以为，过了这座山就没事了，再怎么烦恼，心里有个念想，
颇有点「做完这一票，就回老家结婚，从此过着幸福的生活」之意；
但多少次撩撩绕绕之后，才多少明白并没有结束的那一天——断了念想的翻山越岭，才是真的疲惫。&lt;/p&gt;

&lt;p&gt;这个事实多残忍啊。李宗盛还是唱出来了。
就像他二十年前就问了：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;「有了梦寐以求的容颜，是否就算是拥有春天？」&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;他看破也点破了，用他颗颗粒粒的，粗黑巧克力似的嗓子。
但他没走远，还是坐在人堆里，跟我们一起，用他坑坑唧唧，半念半唱的调子：
抒情一下子，又沉郁一下子。
我们很多时候，怕的其实不是失败，而是被遗弃。
李宗盛一直没忘记普通人的感情。&lt;/p&gt;

&lt;p&gt;他给辛晓琪写的《领悟》，MV 拍得极好。一对男女，爱过，分手了。
多年后，男人去到一个小酒馆喝酒，发现女人已成了老板娘。
那时彼此都老了，但也就这样了。
按照我们一般希望的剧情，是能破镜重圆 —— 当然并没有。
男人出门时，外面瓢泼大雨。女人追出来，递给男人一件雨衣，转身回去了。
就是这样。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;多么痛的领悟&lt;/p&gt;

  &lt;p&gt;你曾是我的全部&lt;/p&gt;

  &lt;p&gt;只愿你挣脱情的枷锁&lt;/p&gt;

  &lt;p&gt;爱的束缚 任意追逐&lt;/p&gt;

  &lt;p&gt;别再为爱受苦&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;李宗盛的歌，大概就是那件雨衣。
没法阻挡瓢泼大雨，没法逆转时光。
只是，在时光流逝时，递过来，一起穿越风雨往前走。
他看通透了，但还在尘世间，与我们这些寻常男女同甘共苦。
同甘不难，主要是，共苦呢。
唱了人世间的苦，但最后也给点希望。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;虽然岁月总是匆匆的催人老&lt;/p&gt;

  &lt;p&gt;虽然情爱总是让人烦恼&lt;/p&gt;

  &lt;p&gt;虽然未来如何不能知道&lt;/p&gt;

  &lt;p&gt;现在说再见会不会太早&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>Austin</name></author><category term="PopMusic" /><summary type="html">张佳玮</summary></entry><entry><title type="html">我的收藏</title><link href="http://localhost:4000/pictures/2020/06/19/%E6%88%91%E7%9A%84%E6%94%B6%E8%97%8F/" rel="alternate" type="text/html" title="我的收藏" /><published>2020-06-19T00:00:00+08:00</published><updated>2020-06-19T00:00:00+08:00</updated><id>http://localhost:4000/pictures/2020/06/19/%E6%88%91%E7%9A%84%E6%94%B6%E8%97%8F</id><content type="html" xml:base="http://localhost:4000/pictures/2020/06/19/%E6%88%91%E7%9A%84%E6%94%B6%E8%97%8F/">&lt;p&gt;私藏的、供个人学习交流使用的、没有版权的影视作品清单。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h1 id=&quot;电影-movies&quot;&gt;电影 Movies&lt;/h1&gt;

&lt;h2 id=&quot;华语&quot;&gt;华语&lt;/h2&gt;

&lt;p&gt;1949 哀乐中年&lt;/p&gt;

&lt;p&gt;1962 冰上山的来客&lt;/p&gt;

&lt;p&gt;1982 茶馆&lt;/p&gt;

&lt;p&gt;1986 芙蓉镇&lt;/p&gt;

&lt;p&gt;1990 本命年&lt;/p&gt;

&lt;p&gt;1991 过年&lt;/p&gt;

&lt;p&gt;1993 孝子贤孙伺候着&lt;/p&gt;

&lt;p&gt;1993 霸王别姬&lt;/p&gt;

&lt;p&gt;1994 大话西游之大圣娶亲&lt;/p&gt;

&lt;p&gt;1994 重庆森林&lt;/p&gt;

&lt;p&gt;1994 阳光灿烂的日子&lt;/p&gt;

&lt;p&gt;1994 饮食男女&lt;/p&gt;

&lt;p&gt;1997 有话好好说&lt;/p&gt;

&lt;p&gt;1997 甲方乙方&lt;/p&gt;

&lt;p&gt;1998 小武&lt;/p&gt;

&lt;p&gt;1999 喜剧之王&lt;/p&gt;

&lt;p&gt;2000 一一&lt;/p&gt;

&lt;p&gt;2000 卧虎藏龙&lt;/p&gt;

&lt;p&gt;2000 花样年华&lt;/p&gt;

&lt;p&gt;2000 鬼子来了&lt;/p&gt;

&lt;p&gt;2002 无间道&lt;/p&gt;

&lt;p&gt;2004 功夫&lt;/p&gt;

&lt;p&gt;2007 太阳照常升起&lt;/p&gt;

&lt;p&gt;2007 色戒&lt;/p&gt;

&lt;p&gt;2010 岁月神偷&lt;/p&gt;

&lt;p&gt;2010 让子弹飞&lt;/p&gt;

&lt;p&gt;2013 狗十三&lt;/p&gt;

&lt;h2 id=&quot;美国&quot;&gt;美国&lt;/h2&gt;

&lt;p&gt;1931 City Lights&lt;/p&gt;

&lt;p&gt;1936 Modern Times&lt;/p&gt;

&lt;p&gt;1939 Gone With the Wind&lt;/p&gt;

&lt;p&gt;1939 Stagecoach&lt;/p&gt;

&lt;p&gt;1939 The Wizard of Oz&lt;/p&gt;

&lt;p&gt;1940 Waterloo Bridge&lt;/p&gt;

&lt;p&gt;1941 Citizen Kane&lt;/p&gt;

&lt;p&gt;1942 Casablanca&lt;/p&gt;

&lt;p&gt;1953 Roman Holiday&lt;/p&gt;

&lt;p&gt;1959 Some Like It Hot&lt;/p&gt;

&lt;p&gt;1962 Lawrence of Arabia&lt;/p&gt;

&lt;p&gt;1966 Blowup&lt;/p&gt;

&lt;p&gt;1966 The Good the Bad and the Ugly&lt;/p&gt;

&lt;p&gt;1967 The Graduate&lt;/p&gt;

&lt;p&gt;1968 2001 A Space Odyssey&lt;/p&gt;

&lt;p&gt;1971 A Clockwork Orange&lt;/p&gt;

&lt;p&gt;1972-1990 The Godfather&lt;/p&gt;

&lt;p&gt;1977-2015 Star Wars&lt;/p&gt;

&lt;p&gt;1979 Apocalypse Now&lt;/p&gt;

&lt;p&gt;1980 Raging Bull&lt;/p&gt;

&lt;p&gt;1980 The Blue Lagoon&lt;/p&gt;

&lt;p&gt;1980 The Shining&lt;/p&gt;

&lt;p&gt;1981 Raiders of the Lost Ark&lt;/p&gt;

&lt;p&gt;1982 Blade Runner&lt;/p&gt;

&lt;p&gt;1986 Luxo Jr.&lt;/p&gt;

&lt;p&gt;1990 Ghost&lt;/p&gt;

&lt;p&gt;1991 Beauty And The Beast&lt;/p&gt;

&lt;p&gt;1991 Terminator 2 Judgment Day&lt;/p&gt;

&lt;p&gt;1992 Scent of a Woman&lt;/p&gt;

&lt;p&gt;1993 Schindler‘s List&lt;/p&gt;

&lt;p&gt;1994 Forrest Gump&lt;/p&gt;

&lt;p&gt;1994 Pulp Fiction&lt;/p&gt;

&lt;p&gt;1994 The Shawshank Redemption&lt;/p&gt;

&lt;p&gt;1994-2004 The Lion King&lt;/p&gt;

&lt;p&gt;1995 Before Sunrise&lt;/p&gt;

&lt;p&gt;1995-2019 Toy Story&lt;/p&gt;

&lt;p&gt;1997 Titanic&lt;/p&gt;

&lt;p&gt;1999-2003 The Matrix&lt;/p&gt;

&lt;p&gt;2001 A Beautiful Mind&lt;/p&gt;

&lt;p&gt;2001 Mulholland Drive&lt;/p&gt;

&lt;p&gt;2001-2003 The Lord of the Rings&lt;/p&gt;

&lt;p&gt;2001-2012 Harry Potter&lt;/p&gt;

&lt;p&gt;2002 Chicago&lt;/p&gt;

&lt;p&gt;2002 The Pianist&lt;/p&gt;

&lt;p&gt;2003 Finding Nemo&lt;/p&gt;

&lt;p&gt;2003-2011 Pirates of The Caribbean&lt;/p&gt;

&lt;p&gt;2005 V For Vendetta&lt;/p&gt;

&lt;p&gt;2008 The Dark Knight&lt;/p&gt;

&lt;p&gt;2008 WALL-E&lt;/p&gt;

&lt;p&gt;2008-2019 MCU&lt;/p&gt;

&lt;p&gt;2009 Up&lt;/p&gt;

&lt;p&gt;2010 Inception&lt;/p&gt;

&lt;p&gt;2013 Frozen&lt;/p&gt;

&lt;p&gt;2013 The Great Gatsby&lt;/p&gt;

&lt;p&gt;2014 The Grand Budapest Hotel&lt;/p&gt;

&lt;p&gt;2015 Mad Max Fury Road&lt;/p&gt;

&lt;p&gt;2016 Zootopia&lt;/p&gt;

&lt;p&gt;2017 Coco&lt;/p&gt;

&lt;p&gt;2017 Dunkirk&lt;/p&gt;

&lt;p&gt;2017 Three Billboards Outside Ebbing Missouri&lt;/p&gt;

&lt;p&gt;2018 Bohemian Rhapsody&lt;/p&gt;

&lt;p&gt;2018 Green Book&lt;/p&gt;

&lt;p&gt;2019 Alita Battle Angel&lt;/p&gt;

&lt;p&gt;2019 Joker&lt;/p&gt;

&lt;p&gt;2019 The Irishman&lt;/p&gt;

&lt;h2 id=&quot;日本&quot;&gt;日本&lt;/h2&gt;

&lt;p&gt;1950 罗生门&lt;/p&gt;

&lt;p&gt;1954 七武士&lt;/p&gt;

&lt;p&gt;1979 鲁邦三世&lt;/p&gt;

&lt;p&gt;1984 风之谷&lt;/p&gt;

&lt;p&gt;1986 天空之城&lt;/p&gt;

&lt;p&gt;1988 My Neighbor Totoro&lt;/p&gt;

&lt;p&gt;1989 Kiki’s Delivery Service&lt;/p&gt;

&lt;p&gt;1992 Porco Rosso&lt;/p&gt;

&lt;p&gt;1995 Ghost in the Shell&lt;/p&gt;

&lt;p&gt;1997 Princess Mononoke&lt;/p&gt;

&lt;p&gt;2001 千与千寻&lt;/p&gt;

&lt;p&gt;2004 Howl’s Moving Castle&lt;/p&gt;

&lt;p&gt;2018 小偷家族&lt;/p&gt;

&lt;h2 id=&quot;法国&quot;&gt;法国&lt;/h2&gt;

&lt;p&gt;1945 Les Enfants du Paradis&lt;/p&gt;

&lt;p&gt;1967 Belle de jour&lt;/p&gt;

&lt;p&gt;1994 Léon&lt;/p&gt;

&lt;p&gt;2001 Le Fabuleux Destin d’Amélie Poulain&lt;/p&gt;

&lt;p&gt;2002 Le Papillon&lt;/p&gt;

&lt;p&gt;2003 Jeux d’enfants&lt;/p&gt;

&lt;p&gt;2004 Les Choristes&lt;/p&gt;

&lt;p&gt;2006 Paris, je t’aime&lt;/p&gt;

&lt;p&gt;2007 La môme&lt;/p&gt;

&lt;p&gt;2011 The Artist&lt;/p&gt;

&lt;p&gt;2011 The Intouchables&lt;/p&gt;

&lt;p&gt;2015 Le Petit Prince&lt;/p&gt;

&lt;h2 id=&quot;英国&quot;&gt;英国&lt;/h2&gt;

&lt;p&gt;1946 Great Expectations&lt;/p&gt;

&lt;p&gt;1994 Four Weddings And A Funeral&lt;/p&gt;

&lt;p&gt;1996 The English Patient&lt;/p&gt;

&lt;p&gt;2013 About Time&lt;/p&gt;

&lt;h2 id=&quot;意大利&quot;&gt;意大利&lt;/h2&gt;

&lt;p&gt;1984 Once Upon a Time in America&lt;/p&gt;

&lt;p&gt;1988 Nuovo cinema Paradiso&lt;/p&gt;

&lt;p&gt;1997 La vita è bella&lt;/p&gt;

&lt;p&gt;1998 La Leggenda Del Pianista Sull Oceano&lt;/p&gt;

&lt;p&gt;2000 Malena&lt;/p&gt;

&lt;p&gt;2003 La meglio gioventù&lt;/p&gt;

&lt;h2 id=&quot;其它&quot;&gt;其它&lt;/h2&gt;

&lt;p&gt;2009 Mary and Max&lt;/p&gt;

&lt;p&gt;2011 A Separation&lt;/p&gt;

&lt;p&gt;2016 Dangal&lt;/p&gt;

&lt;h1 id=&quot;剧集-series&quot;&gt;剧集 Series&lt;/h1&gt;

&lt;p&gt;1940-2006 Tom and Jerry&lt;/p&gt;

&lt;p&gt;1966 Ultraman&lt;/p&gt;

&lt;p&gt;1967 UltraSeven&lt;/p&gt;

&lt;p&gt;1979 機動戦士ガンダム&lt;/p&gt;

&lt;p&gt;1980 Yes Minister&lt;/p&gt;

&lt;p&gt;1981 北の国から&lt;/p&gt;

&lt;p&gt;1986-1989 Dragon Ball&lt;/p&gt;

&lt;p&gt;1986-2008 Saint Seiya&lt;/p&gt;

&lt;p&gt;1990 世にも奇妙な物语&lt;/p&gt;

&lt;p&gt;1991 東京ラブストーリー&lt;/p&gt;

&lt;p&gt;1991 编辑部的故事&lt;/p&gt;

&lt;p&gt;1993 铳梦&lt;/p&gt;

&lt;p&gt;1993-1994 我爱我家&lt;/p&gt;

&lt;p&gt;1994-2004 Friends&lt;/p&gt;

&lt;p&gt;1995 Neon Genesis Evangelion&lt;/p&gt;

&lt;p&gt;1996 Beast Wars&lt;/p&gt;

&lt;p&gt;1999-2018 Digimon&lt;/p&gt;

&lt;p&gt;2002 Ghost In the Shell Stand Alone Complex&lt;/p&gt;

&lt;p&gt;2004 Samurai Champloo&lt;/p&gt;

&lt;p&gt;2006 NANA&lt;/p&gt;

&lt;p&gt;2006 武林外传&lt;/p&gt;

&lt;p&gt;2007-2019 The Big Bang Theory&lt;/p&gt;

&lt;p&gt;2009 Full metal Alchemist Brotherhood&lt;/p&gt;

&lt;p&gt;2009-2011 K-ON!&lt;/p&gt;

&lt;p&gt;2011 Steins Gate&lt;/p&gt;

&lt;p&gt;2011-2019 Black Mirror&lt;/p&gt;

&lt;p&gt;2011-2019 Game of Thrones&lt;/p&gt;

&lt;p&gt;2012 Legal High&lt;/p&gt;

&lt;p&gt;2013 White Album 2&lt;/p&gt;

&lt;p&gt;2013-2016 Masters of sex&lt;/p&gt;

&lt;p&gt;2013-2019 Rick and Morty&lt;/p&gt;

&lt;p&gt;2014 四月是你的谎言&lt;/p&gt;

&lt;p&gt;2014-2016 Bojack Horseman&lt;/p&gt;

&lt;p&gt;2015-2019 吹响吧!上低音号&lt;/p&gt;

&lt;p&gt;2017 Big Little Lies&lt;/p&gt;

&lt;p&gt;2019 CAROLE &amp;amp; TUESDAY&lt;/p&gt;

&lt;p&gt;2019 Love Death Robots&lt;/p&gt;</content><author><name>Austin</name></author><category term="Collections" /><summary type="html">私藏的、供个人学习交流使用的、没有版权的影视作品清单。</summary></entry><entry><title type="html">How To Shoot</title><link href="http://localhost:4000/sports/2020/06/09/HowToShoot/" rel="alternate" type="text/html" title="How To Shoot" /><published>2020-06-09T00:00:00+08:00</published><updated>2020-06-09T00:00:00+08:00</updated><id>http://localhost:4000/sports/2020/06/09/HowToShoot</id><content type="html" xml:base="http://localhost:4000/sports/2020/06/09/HowToShoot/">&lt;p&gt;&lt;strong&gt;SPLASH LAB&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Excellent shooting courses from &lt;strong&gt;&lt;a href=&quot;https://splashlabbasketball.com/&quot;&gt;SPLASH LAB&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&quot;how-to-perfect-your-shooting-form&quot;&gt;How To Perfect Your Shooting Form&lt;/h2&gt;

&lt;iframe title=&quot;YouTube video player&quot; width=&quot;480&quot; height=&quot;390&quot; src=&quot;https://www.youtube.com/embed/LZIROX2H24E&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;how-to-maximize-your-accuracy&quot;&gt;How To Maximize Your Accuracy&lt;/h2&gt;

&lt;iframe title=&quot;YouTube video player&quot; width=&quot;480&quot; height=&quot;390&quot; src=&quot;https://www.youtube.com/embed/1V_pRTwZBmY&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href=&quot;/images/2020-06-09/Splash-Lab-Accuracy-Test.pdf&quot;&gt;Here&lt;/a&gt;
is the accuracy test table.&lt;/p&gt;

&lt;h2 id=&quot;how-to-maximize-your-shooting-range&quot;&gt;How To Maximize Your Shooting Range&lt;/h2&gt;

&lt;iframe title=&quot;YouTube video player&quot; width=&quot;480&quot; height=&quot;390&quot; src=&quot;https://www.youtube.com/embed/V4WZWYRdBOA&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;how-to-stephen-curry-shooting-form&quot;&gt;How To: Stephen Curry Shooting Form&lt;/h2&gt;

&lt;iframe title=&quot;YouTube video player&quot; width=&quot;480&quot; height=&quot;390&quot; src=&quot;https://www.youtube.com/embed/wJ0NGN93wZQ&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;how-to-klay-thompson-shooting-form&quot;&gt;How To: Klay Thompson Shooting Form&lt;/h2&gt;

&lt;iframe title=&quot;YouTube video player&quot; width=&quot;480&quot; height=&quot;390&quot; src=&quot;https://www.youtube.com/embed/lrSljNLesBw&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;</content><author><name>Austin</name></author><category term="Basketball" /><summary type="html">SPLASH LAB</summary></entry></feed>